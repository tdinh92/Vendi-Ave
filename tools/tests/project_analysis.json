{
  "functions": [
    {
      "name": "__init__",
      "file": "property_api_service.py",
      "line": 22,
      "args": [
        "self"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": null
    },
    {
      "name": "parse_address",
      "file": "property_api_service.py",
      "line": 33,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Parse address string into components for API calls"
    },
    {
      "name": "get_basic_profile",
      "file": "property_api_service.py",
      "line": 62,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Get basic property profile from Attom API\nUses the /property/basicprofile endpoint"
    },
    {
      "name": "get_avm_history",
      "file": "property_api_service.py",
      "line": 118,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Get AVM (Automated Valuation Model) history from Attom API\nUses the /avm/avmhistory/detail endpoint\nBased on: https://api.developer.attomdata.com/docs#!/Valuation32V1/AvmHistoryDetail"
    },
    {
      "name": "clean_basic_profile_for_homeowners",
      "file": "property_api_service.py",
      "line": 183,
      "args": [
        "self",
        "profile_data"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Clean basic profile data into simple, homeowner-friendly format"
    },
    {
      "name": "clean_data_for_homeowners",
      "file": "property_api_service.py",
      "line": 224,
      "args": [
        "self",
        "avm_data"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Clean AVM data into simple, homeowner-friendly format\nPerfect for CSV export or easy reading"
    },
    {
      "name": "get_basic_profile_report",
      "file": "property_api_service.py",
      "line": 271,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Complete workflow: Get basic profile data and clean it for homeowners"
    },
    {
      "name": "get_property_report",
      "file": "property_api_service.py",
      "line": 285,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Complete workflow: Get AVM data and clean it for homeowners"
    },
    {
      "name": "get_combined_report",
      "file": "property_api_service.py",
      "line": 299,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Get both AVM and basic profile data, with AVM taking priority for valuation\nFalls back to basic profile if AVM is not available"
    },
    {
      "name": "get_complete_report",
      "file": "property_api_service.py",
      "line": 323,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Get complete property report with both AVM and Basic Profile data\nReturns both datasets with availability flags"
    },
    {
      "name": "get_all_events_snapshot",
      "file": "property_api_service.py",
      "line": 356,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Get comprehensive property event snapshot from Attom API\nUses the /allevents/snapshot endpoint"
    },
    {
      "name": "clean_all_events_for_homeowners",
      "file": "property_api_service.py",
      "line": 412,
      "args": [
        "self",
        "events_data"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Clean all events data into homeowner-friendly format with raw assessment data preservation"
    },
    {
      "name": "get_all_events_report",
      "file": "property_api_service.py",
      "line": 533,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Complete workflow: Get all events data and clean it for homeowners"
    },
    {
      "name": "get_assessment_history",
      "file": "property_api_service.py",
      "line": 547,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Get historical assessment data from Attom API\nUses the /assessmenthistory/detail endpoint"
    },
    {
      "name": "clean_assessment_history_for_homeowners",
      "file": "property_api_service.py",
      "line": 603,
      "args": [
        "self",
        "assessment_data"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Clean assessment history data into homeowner-friendly format with raw values"
    },
    {
      "name": "get_assessment_history_report",
      "file": "property_api_service.py",
      "line": 713,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Complete workflow: Get assessment history and clean it for homeowners"
    },
    {
      "name": "get_comprehensive_analysis",
      "file": "property_api_service.py",
      "line": 727,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Complete comprehensive analysis: Basic Profile + AVM + Timeline + Charts\nThis is the ultimate property analysis combining all data sources"
    },
    {
      "name": "_create_comprehensive_summary",
      "file": "property_api_service.py",
      "line": 788,
      "args": [
        "self",
        "basic_profile",
        "avm_data",
        "timeline_data",
        "assessment_history"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Create a summary of all available data"
    },
    {
      "name": "_open_charts_in_browser",
      "file": "property_api_service.py",
      "line": 837,
      "args": [
        "self",
        "address"
      ],
      "is_async": false,
      "decorators": [],
      "docstring": "Open the interactive charts in the default web browser"
    },
    {
      "name": "health_check",
      "file": "property_rest_api.py",
      "line": 18,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b7723cb1f0>"
      ],
      "docstring": "Health check endpoint"
    },
    {
      "name": "get_combined_report",
      "file": "property_rest_api.py",
      "line": 26,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b7723ca320>"
      ],
      "docstring": "Get combined property report (AVM + Basic Profile fallback)\n\nPOST /property/combined\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_avm_report",
      "file": "property_rest_api.py",
      "line": 56,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b7723c9450>"
      ],
      "docstring": "Get AVM-only property report\n\nPOST /property/avm\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_basic_profile_report",
      "file": "property_rest_api.py",
      "line": 86,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b7723c8580>"
      ],
      "docstring": "Get basic profile property report\n\nPOST /property/basic\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_raw_avm",
      "file": "property_rest_api.py",
      "line": 116,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b7723e77f0>"
      ],
      "docstring": "Get raw AVM data from Attom API\n\nPOST /property/raw/avm\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_raw_basic",
      "file": "property_rest_api.py",
      "line": 146,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b7723e6920>"
      ],
      "docstring": "Get raw basic profile data from Attom API\n\nPOST /property/raw/basic\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_complete_report",
      "file": "property_rest_api.py",
      "line": 176,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b7723e5a50>"
      ],
      "docstring": "Get complete property report (both AVM and Basic Profile data)\n\nPOST /property/complete\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_all_events_report",
      "file": "property_rest_api.py",
      "line": 206,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b7723e4b80>"
      ],
      "docstring": "Get comprehensive all events snapshot (sales, mortgages, assessments, permits, market events)\n\nPOST /property/allevents\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_raw_all_events",
      "file": "property_rest_api.py",
      "line": 236,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b772387790>"
      ],
      "docstring": "Get raw all events snapshot data (unprocessed API response)\n\nPOST /property/raw/allevents\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_assessment_history_report",
      "file": "property_rest_api.py",
      "line": 266,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b772369ff0>"
      ],
      "docstring": "Get property assessment history with historical tax and value data\n\nPOST /property/assessmenthistory\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_raw_assessment_history",
      "file": "property_rest_api.py",
      "line": 296,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b772364280>"
      ],
      "docstring": "Get raw assessment history data (unprocessed API response)\n\nPOST /property/raw/assessmenthistory\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "get_batch_reports",
      "file": "property_rest_api.py",
      "line": 326,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b772367460>"
      ],
      "docstring": "Get property reports for multiple addresses\n\nPOST /property/batch\nBody: {\n    \"addresses\": [\"123 Main St, Boston, MA 02101\", \"456 Oak Ave, Springfield, IL 62701\"],\n    \"report_type\": \"combined\"  // \"combined\", \"avm\", or \"basic\"\n}"
    },
    {
      "name": "api_documentation",
      "file": "property_rest_api.py",
      "line": 397,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b77236c490>"
      ],
      "docstring": "API documentation endpoint"
    },
    {
      "name": "assessment_charts",
      "file": "property_rest_api.py",
      "line": 428,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b77236c760>"
      ],
      "docstring": "Interactive D3.js charts for property assessment history visualization\n\nGET /charts"
    },
    {
      "name": "get_comprehensive_analysis",
      "file": "property_rest_api.py",
      "line": 437,
      "args": [],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b77236d5d0>"
      ],
      "docstring": "Get comprehensive property analysis (Basic + AVM + Timeline + Auto-Charts)\n\nPOST /property/comprehensive\nBody: {\"address\": \"123 Main St, Boston, MA 02101\"}"
    },
    {
      "name": "serve_static",
      "file": "property_rest_api.py",
      "line": 467,
      "args": [
        "filename"
      ],
      "is_async": false,
      "decorators": [
        "<ast.Call object at 0x77b77236f0d0>"
      ],
      "docstring": "Serve static files"
    }
  ],
  "classes": [
    {
      "name": "PropertyAPIService",
      "file": "property_api_service.py",
      "line": 16,
      "methods": [
        "__init__",
        "parse_address",
        "get_basic_profile",
        "get_avm_history",
        "clean_basic_profile_for_homeowners",
        "clean_data_for_homeowners",
        "get_basic_profile_report",
        "get_property_report",
        "get_combined_report",
        "get_complete_report",
        "get_all_events_snapshot",
        "clean_all_events_for_homeowners",
        "get_all_events_report",
        "get_assessment_history",
        "clean_assessment_history_for_homeowners",
        "get_assessment_history_report",
        "get_comprehensive_analysis",
        "_create_comprehensive_summary",
        "_open_charts_in_browser"
      ],
      "base_classes": [],
      "docstring": "Service that combines Attom property profile and AVM history data\ninto a unified REST API response format"
    }
  ],
  "apis": [
    {
      "route": "/health",
      "methods": [
        "GET"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/combined",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/avm",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/basic",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/raw/avm",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/raw/basic",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/complete",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/allevents",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/raw/allevents",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/assessmenthistory",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/raw/assessmenthistory",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/batch",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/",
      "methods": [
        "GET"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/charts",
      "methods": [
        "GET"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/property/comprehensive",
      "methods": [
        "POST"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    },
    {
      "route": "/static/<path:filename>",
      "methods": [
        "GET"
      ],
      "file": "property_rest_api.py",
      "framework": "flask"
    }
  ],
  "imports": [
    {
      "module": "requests",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "os",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "dotenv.load_dotenv",
      "from_module": "dotenv",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "typing.Dict",
      "from_module": "typing",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "typing.Optional",
      "from_module": "typing",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "typing.List",
      "from_module": "typing",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "typing.Any",
      "from_module": "typing",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "json",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "datetime.datetime",
      "from_module": "datetime",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "webbrowser",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "urllib.parse",
      "alias": null,
      "file": "property_api_service.py"
    },
    {
      "module": "flask.Flask",
      "from_module": "flask",
      "alias": null,
      "file": "property_rest_api.py"
    },
    {
      "module": "flask.jsonify",
      "from_module": "flask",
      "alias": null,
      "file": "property_rest_api.py"
    },
    {
      "module": "flask.request",
      "from_module": "flask",
      "alias": null,
      "file": "property_rest_api.py"
    },
    {
      "module": "flask.render_template",
      "from_module": "flask",
      "alias": null,
      "file": "property_rest_api.py"
    },
    {
      "module": "flask_cors.CORS",
      "from_module": "flask_cors",
      "alias": null,
      "file": "property_rest_api.py"
    },
    {
      "module": "property_api_service.PropertyAPIService",
      "from_module": "property_api_service",
      "alias": null,
      "file": "property_rest_api.py"
    },
    {
      "module": "json",
      "alias": null,
      "file": "property_rest_api.py"
    },
    {
      "module": "flask.send_from_directory",
      "from_module": "flask",
      "alias": null,
      "file": "property_rest_api.py"
    },
    {
      "module": "os",
      "alias": null,
      "file": "property_rest_api.py"
    }
  ],
  "config_files": [
    ".env",
    "requirements.txt"
  ],
  "test_files": [],
  "project_metadata": {
    "requirements": [
      "flask>=2.0.0",
      "flask-cors>=3.0.0",
      "requests>=2.25.0",
      "python-dotenv>=0.19.0"
    ]
  },
  "framework": "flask",
  "project_type": "api",
  "test_coverage": {
    "total_testable_items": 52,
    "existing_test_files": 0,
    "estimated_coverage_percent": 0.0,
    "functions": 35,
    "classes": 1,
    "apis": 16
  }
}